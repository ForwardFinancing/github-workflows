name: Run jobs if ready for review

on:
  workflow_call:
    secrets:
      SLACK_READY_FOR_REVIEW_WEBHOOK_URL:
        description: 'Slack webhook to call to trigger the Slack workflow'
        required: true

  # In order to work with dependabot PRs, we need to use `pull_request_target`
  # instead of `pull_request`.
  #
  # See:
  # - https://github.com/dependabot/dependabot-core/issues/3253#issuecomment-795140576
  # - https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request_target
  pull_request_target:
    types: [opened, ready_for_review]

jobs:
  ready_for_review:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/github-script@v6
        continue-on-error: true # avoid failing the build if we can't send the notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_READY_FOR_REVIEW_WEBHOOK_URL }}
        with:
          script: |
            const rawWebhookUrl = process.env.SLACK_WEBHOOK_URL

            if (rawWebhookUrl) {
              // be extra careful to avoid leaking the webhook URL in logs
              core.setSecret(rawWebhookUrl)
            }

            let webhookUrl

            try {
              // ensure we're working with a valid URL
              webhookUrl = new URL(rawWebhookUrl)
            } catch {
              core.warning('Webhook URL is not a valid URL')
              return
            }

            const { pull_request: pr } = context.payload

            if (pr.draft) {
              // this workflow is expected to be called for both the 'opened'
              // and 'ready_for_review' action types on PRs.
              //
              // the 'ready_for_review' type is only triggered when a draft PR
              // is marked as ready for review, but the the 'opened' action type
              // is triggered for draft PRs.
              //
              // in order to avoid sending notifications for PRs that are opened
              // as drafts, we need to bail early from this job.
              core.info('Skipping because PR is a draft')
              return
            }

            return new Promise((resolve) => {
              // actions/github-script@v6 uses Node 16, which does not have
              // fetch globally available. Instead, we need to use the low-level
              // https API :(
              const https = require('node:https')

              const payload = {
                repo_name: context.repo.repo,
                pr_url: pr.html_url,
                pr_number: pr.number,
                pr_title: pr.title,
                pr_author_github_username: pr.user.login
              }

              const requestBody = JSON.stringify(
                Object.fromEntries(
                  // slack webhook only accepts string values, so we need to
                  // cast each of the values in the payload to a string
                  Object.entries(payload).map(([key, value]) => [key, `${value}`])
                )
              )

              const options = {
                method: 'POST',
                headers: {
                  'content-type': 'application/json',
                  'content-length': Buffer.byteLength(requestBody),
                },
              }

              const req = https.request(webhookUrl, options, (res) => {
                res.setEncoding('utf8')

                res.once('error', (error) => {
                  core.warning(`Error receiving HTTPS response: ${err.message}`)
                  resolve()
                })

                let responseBodyChunks = []

                res.on('data', (chunk) => {
                  responseBodyChunks.push(chunk)
                })

                res.once('end', () => {
                  if (res.statusCode !== 200) {
                    core.warning(`Received non-200 status code: ${res.statusCode}`)
                  }

                  core.info(responseBodyChunks.join(''))

                  resolve()
                })
              })

              req.once('error', (err) => {
                core.warning('Error making HTTPS request: ${err.message}')
                resolve()
              })

              req.write(requestBody)

              req.end()
            })
